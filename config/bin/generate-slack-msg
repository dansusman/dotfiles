#!/usr/bin/env bash

set -euo pipefail

# Allow specifying a directory to work in
TARGET_DIR="${1:-$(pwd)}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

error() {
    echo -e "${RED}Error: $1${NC}" >&2
    exit 1
}

info() {
    echo -e "${BLUE}$1${NC}" >&2
}

warn() {
    echo -e "${YELLOW}$1${NC}" >&2
}

# Change to target directory if specified
if [[ "$TARGET_DIR" != "$(pwd)" ]]; then
    if [[ ! -d "$TARGET_DIR" ]]; then
        error "Directory '$TARGET_DIR' does not exist"
    fi
    cd "$TARGET_DIR"
fi

# Check if we're in a git repository
if ! git rev-parse --git-dir >/dev/null 2>&1; then
    error "Not in a git repository"
fi

# Check if gh CLI is authenticated
if ! gh auth status >/dev/null 2>&1; then
    error "GitHub CLI not authenticated. Run 'gh auth login'"
fi

# Check if Claude CLI is available (but don't error, just warn)
if ! command -v claude >/dev/null 2>&1; then
    warn "Claude CLI not found. Will use fallback message generation."
    USE_CLAUDE=false
else
    USE_CLAUDE=true
fi

# Get repository info and current user
REPO_NAME=$(git config --get remote.origin.url | sed 's/.*\/\([^\/]*\)\.git$/\1/' || echo "unknown")
CURRENT_BRANCH=$(git branch --show-current)
GIT_USER=$(git config user.name)
GITHUB_USER=$(gh api user --jq .login)

# Get dates for filtering
YESTERDAY=$(date -d "1 day ago" +%Y-%m-%d 2>/dev/null || date -v-1d +%Y-%m-%d 2>/dev/null || error "Unable to calculate yesterday's date")
TODAY=$(date +%Y-%m-%d)
TWO_DAYS_AGO=$(date -d "2 days ago" +%Y-%m-%d 2>/dev/null || date -v-2d +%Y-%m-%d 2>/dev/null || echo "$YESTERDAY")

info "Collecting activity for user: $GITHUB_USER"
info "Repository: $REPO_NAME"
info "Date range: $TWO_DAYS_AGO to $TODAY"

# Collect data for Claude processing
DATA_FOR_CLAUDE=""

# Get my recent commits
RECENT_COMMITS=$(git log --author="$GIT_USER" --since="$TWO_DAYS_AGO 00:00:00" --until="$TODAY 23:59:59" --pretty=format:"%h - %s (%ar)" --no-merges 2>/dev/null || echo "")

if [[ -n "$RECENT_COMMITS" ]]; then
    DATA_FOR_CLAUDE+="Recent commits by $GIT_USER in $REPO_NAME:\n"
    while IFS= read -r commit; do
        DATA_FOR_CLAUDE+="- $commit\n"
    done <<< "$RECENT_COMMITS"
    DATA_FOR_CLAUDE+="\n"
fi

# Get my recent PRs
info "Fetching recent PRs..."
RECENT_PRS=$(gh pr list --author="$GITHUB_USER" --state=all --limit=10 --json title,state,createdAt,updatedAt --template '{{range .}}{{.title}} ({{.state}}, updated {{timeago .updatedAt}}){{"\n"}}{{end}}' 2>/dev/null || echo "")

if [[ -n "$RECENT_PRS" ]]; then
    DATA_FOR_CLAUDE+="Recent PRs by $GITHUB_USER:\n"
    while IFS= read -r pr; do
        if [[ -n "$pr" ]]; then
            DATA_FOR_CLAUDE+="- $pr\n"
        fi
    done <<< "$RECENT_PRS"
    DATA_FOR_CLAUDE+="\n"
fi

# Get assigned issues from the project that are In Progress
info "Fetching assigned project issues..."
PROJECT_ISSUES=$(gh project item-list 34 --owner Ginger-Labs --format json --limit 150 2>/dev/null | jq -r '.items[] | select(.assignees and (.assignees | contains(["'$GITHUB_USER'"])) and .status == "In Progress") | "\(.content.number)|\(.title)|\(.content.body)|\(.status)"' 2>/dev/null || echo "")

if [[ -n "$PROJECT_ISSUES" ]]; then
    DATA_FOR_CLAUDE+="In Progress project issues:\n"
    while IFS='|' read -r number title description status; do
        if [[ -n "$title" ]]; then
            DATA_FOR_CLAUDE+="- #$number: $title (Status: $status)"
            if [[ -n "$description" && "$description" != "null" ]]; then
                SHORT_DESC=$(echo "$description" | head -c 150 | tr '\n' ' ')
                if [[ ${#description} -gt 150 ]]; then
                    SHORT_DESC+="..."
                fi
                DATA_FOR_CLAUDE+=" - $SHORT_DESC"
            fi
            DATA_FOR_CLAUDE+="\n"
        fi
    done <<< "$PROJECT_ISSUES"
    DATA_FOR_CLAUDE+="\n"
else
    info "No In Progress project issues found for user $GITHUB_USER"
fi

# Get current branch and working status
DATA_FOR_CLAUDE+="Current context:\n"
DATA_FOR_CLAUDE+="- Working on branch: $CURRENT_BRANCH\n"
DATA_FOR_CLAUDE+="- Repository: $REPO_NAME\n"

# Check for uncommitted changes
UNCOMMITTED=$(git status --porcelain 2>/dev/null || echo "")
if [[ -n "$UNCOMMITTED" ]]; then
    DATA_FOR_CLAUDE+="- Has uncommitted changes\n"
fi

# Generate Claude prompt
CLAUDE_PROMPT="Based on this developer activity data, generate a brief, functional Slack standup message. Keep it friendly but professional and to the point. Use bullet points for lists of work items. Avoid emojis, excessive enthusiasm, or overly casual language.

Format should be:
- Brief greeting (optional)
- Section for recent work with header like 'Yesterday:' or 'Recently:'
- Section for current work with header like 'Today:' or 'Currently:'

Do not include phrases like 'Here's my update', 'Here's my standup update', 'Here's what I've been working on', 'Recent work:', 'Currently focusing on:', or similar meta-commentary. Use simple time-based headers instead.

Make sure to clearly distinguish between past work (yesterday/recently) and current/today's work using time-based section headers.

Any project issues with In Progress status should be included in the Today section as current work.

Activity data:
$DATA_FOR_CLAUDE

Generate a concise Slack message (plain text with bullet points, no markdown):"

# Generate message
FINAL_MESSAGE=""

if [[ "$USE_CLAUDE" == "true" ]]; then
    info "Generating message with Claude..."
    CLAUDE_RESPONSE=$(echo "$CLAUDE_PROMPT" | claude -p 2>&1)
    CLAUDE_EXIT_CODE=$?
    
    if [[ $CLAUDE_EXIT_CODE -eq 0 && -n "$CLAUDE_RESPONSE" && "$CLAUDE_RESPONSE" != *"error"* && "$CLAUDE_RESPONSE" != *"Error"* ]]; then
        FINAL_MESSAGE="$CLAUDE_RESPONSE"
    else
        warn "Claude failed (exit code: $CLAUDE_EXIT_CODE). Error: $CLAUDE_RESPONSE"
        info "Falling back to manual message generation..."
        USE_CLAUDE=false
    fi
fi

# Fallback message generation if Claude is unavailable or failed
if [[ "$USE_CLAUDE" == "false" ]]; then
    # Generate a simple but more informative message
    if [[ -n "$RECENT_COMMITS" ]]; then
        COMMIT_COUNT=$(echo "$RECENT_COMMITS" | wc -l | tr -d ' ')
        LATEST_COMMIT_MSG=$(echo "$RECENT_COMMITS" | head -n 1 | sed 's/^[a-f0-9]* - //' | sed 's/ ([^)]*)$//')
        FINAL_MESSAGE="Morning! Made $COMMIT_COUNT commits recently in $REPO_NAME. Latest: \"$LATEST_COMMIT_MSG\""
    else
        FINAL_MESSAGE="Good morning! Working on $REPO_NAME"
    fi
    
    if [[ -n "$RECENT_PRS" ]]; then
        PR_COUNT=$(echo "$RECENT_PRS" | wc -l | tr -d ' ')
        FINAL_MESSAGE+=". Also have $PR_COUNT recent PRs up"
    fi
    
    if [[ -n "$PROJECT_ISSUES" ]]; then
        FINAL_MESSAGE+=". Tackling some Sync and Server Storage issues today"
    fi
    
    FINAL_MESSAGE+="."
fi

# Output the final message to stdout
echo "$FINAL_MESSAGE"
