#!/bin/bash

# ----- Configuration -----
EDITOR="${EDITOR:-vim}"
COMMIT_MSG_FILE=$1
LOCAL_CONFIG=".git/commit-config.yml"
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}"
GLOBAL_CONFIG="$CONFIG_DIR/commit-helper/config.yml"
CONFIG_FILE="$LOCAL_CONFIG"

BRANCH_NAME=$(git branch | grep '*' | sed 's/* //') 

if [[ $BRANCH_NAME == *"no branch"* ]]; then
  echo 'pre-commit hook skipped' 1>&2
  exit 0
fi

if [ "$NO_VERIFY" ]; then
    echo 'pre-commit hook skipped' 1>&2
    exit 0
fi

# Skip merge/squash/amend/rebase commits
if [[ "$2" == "merge" || "$2" == "squash" || "$2" == "commit" ]]; then
  exit 0
fi

# Skip during rebase operations
if [[ -d ".git/rebase-merge" || -d ".git/rebase-apply" || -f ".git/REBASE_HEAD" ]]; then
  exit 0
fi

# Use global config if no local config found
if [[ ! -f "$CONFIG_FILE" ]]; then
  CONFIG_FILE="$GLOBAL_CONFIG"
fi

if [[ ! -f "$CONFIG_FILE" ]]; then
  echo "‚ùå No commit config found. Create $LOCAL_CONFIG or $GLOBAL_CONFIG" >&2
  exit 1
fi

# ----- Helper Functions -----
build_menu() {
  yq e ".$1" "$CONFIG_FILE" | sed 's/^/ /' | awk -F: '{printf "%s = %s\n", $1, $2}' | sed 's/^ *//' | sed 's/\\U\([0-9A-F]\{8\}\)/\&#x\1;/g' | perl -C -pe 's/&#x([0-9A-F]{8});/chr(hex($1))/ge' | sed 's/= *"/= /' | sed 's/"$//'
}

build_preview() {
  # Build current message state as single line for prompt
  if [[ -n "$TYPE_KEY" && -n "$SHORT_MSG" ]]; then
    echo "$TYPE_KEY$SCOPE_FMT$EXCL_MARK: $SHORT_MSG"
  elif [[ -n "$TYPE_KEY" ]]; then
    echo "$TYPE_KEY$SCOPE_FMT$EXCL_MARK: [pending]"
  else
    echo "[type]: [message]"
  fi
}

# ----- Navigation Variables -----
CURRENT_STAGE=1
TYPE_KEY=""
SCOPE_FMT=""
EXCL_MARK=""
SHORT_MSG=""
BODY=""
BREAKING_TEXT=""
ISSUE_NUM=""

# ----- Main Loop -----
while true; do
  case $CURRENT_STAGE in
    1)
      # ----- Step 1: Commit type -----
      TYPE_MENU=$(build_menu types)
      PREVIEW=$(build_preview)
      TYPE_RESULT=$(echo "$TYPE_MENU" | fzf --prompt="$PREVIEW üîß Type (Ctrl+Y to force input): " --height=50% --reverse --with-nth=1,2 --delimiter== --select-1 --expect=ctrl-y --print-query)
      FZF_EXIT_CODE=$?
      if [[ $FZF_EXIT_CODE -ne 0 ]]; then
        # Check if we have any output (meaning Ctrl+Y was pressed)
        if [[ -z "$TYPE_RESULT" ]]; then
          echo "‚ùå Cancelled by user." >&2
          exit 1
        fi
      fi
      
      # Parse result: first line is query, second is key pressed, third is selection
      TYPE_QUERY=$(echo "$TYPE_RESULT" | sed -n '1p')
      TYPE_KEY_PRESSED=$(echo "$TYPE_RESULT" | sed -n '2p')
      TYPE_SELECTION=$(echo "$TYPE_RESULT" | sed -n '3p')
      
      if [[ "$TYPE_KEY_PRESSED" == "ctrl-y" ]]; then
        TYPE_KEY="$TYPE_QUERY"
      else
        TYPE_KEY=$(echo "$TYPE_SELECTION" | cut -d= -f1 | xargs)
      fi
      [[ -z "$TYPE_KEY" ]] && { echo "‚ùå Commit type is required." >&2; exit 1; }
      CURRENT_STAGE=2
      ;;

    2)
      # ----- Step 2: Commit scope -----
      SCOPE_MENU=$(build_menu scopes)
      PREVIEW=$(build_preview)
      SCOPE_RESULT=$( (echo "$SCOPE_MENU"; echo "<none> = No scope") \
        | fzf --prompt="$PREVIEW üì¶ Scope (Ctrl+Y to force input): " --height=50% --reverse --with-nth=1,2 --delimiter== --select-1 --expect=ctrl-y --print-query)
      FZF_EXIT_CODE=$?
      if [[ $FZF_EXIT_CODE -ne 0 ]]; then
        # Check if we have any output (meaning Ctrl+Y was pressed)
        if [[ -z "$SCOPE_RESULT" ]]; then
          CURRENT_STAGE=1
          continue
        fi
      fi
      
      # Parse result: first line is query, second is key pressed, third is selection
      SCOPE_QUERY=$(echo "$SCOPE_RESULT" | sed -n '1p')
      SCOPE_KEY_PRESSED=$(echo "$SCOPE_RESULT" | sed -n '2p')
      SCOPE_SELECTION=$(echo "$SCOPE_RESULT" | sed -n '3p')
      
      if [[ "$SCOPE_KEY_PRESSED" == "ctrl-y" ]]; then
        SCOPE_KEY="$SCOPE_QUERY"
      else
        SCOPE_KEY=$(echo "$SCOPE_SELECTION" | cut -d= -f1 | xargs)
      fi
      if [[ "$SCOPE_KEY" == "<none>" || -z "$SCOPE_KEY" ]]; then
        SCOPE_FMT=""
      else
        SCOPE_FMT="($SCOPE_KEY)"
      fi
      CURRENT_STAGE=3
      ;;

    3)
      # ----- Step 3: Breaking change -----
      PREVIEW=$(build_preview)
      IS_BREAKING=$(printf "No\nYes" | fzf --prompt="$PREVIEW üö® Breaking? " --height=30% --reverse --select-1)
      if [[ $? -ne 0 ]]; then
        CURRENT_STAGE=2
        continue
      fi
      
      # Handle empty selection
      if [[ -z "$IS_BREAKING" ]]; then
        IS_BREAKING="No"
      fi
      
      EXCL_MARK=""
      if [[ "$IS_BREAKING" == "Yes" ]]; then
        EXCL_MARK="!"
      fi
      CURRENT_STAGE=4
      ;;

    4)
      # ----- Step 4: Commit short summary -----
      clear
      PREVIEW=$(build_preview)
      SHORT_MSG=$(echo "" | fzf --prompt="$PREVIEW üìù Message: " --print-query --height=50% || true)
      
      # Get the query (what user typed)
      SHORT_MSG=$(echo "$SHORT_MSG" | head -1)
      
      [[ -z "$SHORT_MSG" ]] && { echo "‚ùå Short message is required. Try again." >&2; continue; }
      CURRENT_STAGE=5
      ;;

    5)
      # ----- Step 5: Commit body -----
      PREVIEW=$(build_preview)
      BODY_INPUT=$(echo "" | fzf --prompt="$PREVIEW üìù Description: " --print-query --height=50% || true)
      
      # Get the query (what user typed)
      BODY_INPUT=$(echo "$BODY_INPUT" | head -1)
      
      # Convert | to actual newlines
      BODY=$(echo "$BODY_INPUT" | sed 's/|/\n/g')
      CURRENT_STAGE=6
      ;;

    6)
      # ----- Step 6: Breaking description (if applicable) -----
      if [[ "$IS_BREAKING" == "Yes" ]]; then
        PREVIEW=$(build_preview)
        BREAKING_INPUT=$(echo "" | fzf --prompt="$PREVIEW ‚ö†Ô∏è Breaking: " --print-query --height=50% || true)
        
        # Get the query (what user typed)
        BREAKING_INPUT=$(echo "$BREAKING_INPUT" | head -1)
        
        if [[ -z "$BREAKING_INPUT" ]]; then
          echo "‚ùå Breaking change description is required."
          continue
        fi
        
        # Convert | to actual newlines
        BREAKING_DESC=$(echo "$BREAKING_INPUT" | sed 's/|/\n/g')
        BREAKING_TEXT=$'\nBREAKING CHANGE: '"$BREAKING_DESC"
      fi
      CURRENT_STAGE=7
      ;;

    7)
      # ----- Step 7: Select GitHub issue -----
      PREVIEW=$(build_preview)
      ISSUE_RESULT=$(gh issue list --limit 100 --state open --json number,title \
        | jq -r '.[] | "\(.number): \(.title)"' \
        | (echo "<none> = No issue"; cat) \
        | fzf --prompt="$PREVIEW üîó Issue (Ctrl+Y to force input): " --height=50% --reverse --select-1 --expect=ctrl-y --print-query)
      FZF_EXIT_CODE=$?
      if [[ $FZF_EXIT_CODE -ne 0 ]]; then
        # Check if we have any output (meaning Ctrl+Y was pressed)
        if [[ -z "$ISSUE_RESULT" ]]; then
          CURRENT_STAGE=6
          continue
        fi
      fi
      
      # Parse result: first line is query, second is key pressed, third is selection
      ISSUE_QUERY=$(echo "$ISSUE_RESULT" | sed -n '1p')
      ISSUE_KEY_PRESSED=$(echo "$ISSUE_RESULT" | sed -n '2p')
      ISSUE_SELECTION=$(echo "$ISSUE_RESULT" | sed -n '3p')
      
      if [[ "$ISSUE_KEY_PRESSED" == "ctrl-y" ]]; then
        ISSUE_NUM="$ISSUE_QUERY"
      else
        SELECTED="$ISSUE_SELECTION"
        if [[ "$SELECTED" == "<none> = No issue" ]]; then
          ISSUE_NUM=""
        else
          ISSUE_NUM=$(echo "$SELECTED" | cut -d: -f1 | tr -d ' ')
        fi
      fi
      break
      ;;
  esac
done

# ----- Final commit message -----
clear
echo "‚úÖ Final commit message:"
PREVIEW=$(build_preview)
echo "$PREVIEW"

{
  echo "$TYPE_KEY$SCOPE_FMT$EXCL_MARK: $SHORT_MSG"
  if [[ -n "$BODY" && "$BODY" != "" ]]; then
    echo
    echo "$BODY"
  fi
  if [[ -n "$BREAKING_TEXT" ]]; then
    echo "$BREAKING_TEXT"
  fi
  if [[ -n "$ISSUE_NUM" ]]; then
    echo
    echo "#$ISSUE_NUM"
  fi
} > "$COMMIT_MSG_FILE"
